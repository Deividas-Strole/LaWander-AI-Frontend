{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deividas\\\\MyProjects\\\\React\\\\LaWander-AI-Frontend\\\\src\\\\components\\\\SpecificPlacesMap.jsx\",\n  _s = $RefreshSig$();\n// src/components/SpecificPlacesMap.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport \"./SpecificPlaces.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpecificPlacesMap = ({\n  travelData\n}) => {\n  _s();\n  const [placeCoordinates, setPlaceCoordinates] = useState([]);\n  const [center, setCenter] = useState({\n    lat: 0,\n    lng: 0\n  });\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries: [\"places\"]\n  });\n  useEffect(() => {\n    if (isLoaded && Array.isArray(travelData.generatedItinerary)) {\n      const geocoder = new window.google.maps.Geocoder();\n      const placePromises = travelData.generatedItinerary.map(place => {\n        const placeName = typeof place === \"string\" ? place : place.name;\n        return new Promise(resolve => {\n          geocoder.geocode({\n            address: placeName\n          }, (results, status) => {\n            if (status === \"OK\" && results[0]) {\n              const location = results[0].geometry.location;\n              resolve({\n                name: placeName,\n                description: place.description || \"\",\n                lat: location.lat(),\n                lng: location.lng()\n              });\n            } else {\n              console.warn(`Geocode failed for ${placeName}: ${status}`);\n              resolve(null);\n            }\n          });\n        });\n      });\n      Promise.all(placePromises).then(results => {\n        const validResults = results.filter(res => res !== null);\n        if (validResults.length > 0) {\n          setPlaceCoordinates(validResults);\n          setCenter({\n            lat: validResults[0].lat,\n            lng: validResults[0].lng\n          });\n        }\n      });\n    }\n  }, [isLoaded, travelData]);\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading maps...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"specific-places-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"travel-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Travel Plan Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Current City:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), \" \", travelData.currentCity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Destination:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), \" \", travelData.destination]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Days:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), \" \", travelData.days]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), Array.isArray(travelData.generatedItinerary) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Generated Itinerary:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"itinerary-list\",\n            children: travelData.generatedItinerary.map((item, index) => {\n              let name, description;\n              if (typeof item === \"string\") {\n                name = item;\n                description = \"\";\n              } else if (typeof item === \"object\") {\n                name = item.name;\n                description = item.description;\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"itinerary-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 23\n                }, this), description && /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: description.split(\"\\n\").map((line, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 97,\n                      columnNumber: 31\n                    }, this)]\n                  }, i, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-panel\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        zoom: 8,\n        center: center,\n        onClick: () => setSelectedPlace(null),\n        children: [placeCoordinates.map((place, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: place.lat,\n            lng: place.lng\n          },\n          onClick: () => setSelectedPlace(place)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)), selectedPlace && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: {\n            lat: selectedPlace.lat,\n            lng: selectedPlace.lng\n          },\n          onCloseClick: () => setSelectedPlace(null),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: selectedPlace.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(SpecificPlacesMap, \"0gztIyJ16tLV6saqXqGjF02lHlI=\", false, function () {\n  return [useLoadScript];\n});\n_c = SpecificPlacesMap;\nexport default SpecificPlacesMap;\n\n// old working version\n// // src/components/SpecificPlacesMap.jsx\n// import React, { useState, useEffect } from \"react\";\n// import {\n//   GoogleMap,\n//   useLoadScript,\n//   Marker,\n//   InfoWindow,\n// } from \"@react-google-maps/api\";\n// import \"./SpecificPlaces.css\";\n// const SpecificPlacesMap = ({ travelData }) => {\n//   const [placeCoordinates, setPlaceCoordinates] = useState([]);\n//   const [center, setCenter] = useState({ lat: 0, lng: 0 });\n//   const [selectedPlace, setSelectedPlace] = useState(null);\n\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n//     libraries: [\"places\"],\n//   });\n\n//   useEffect(() => {\n//     if (isLoaded && Array.isArray(travelData.generatedItinerary)) {\n//       const geocoder = new window.google.maps.Geocoder();\n//       const placePromises = travelData.generatedItinerary.map((place) => {\n//         return new Promise((resolve) => {\n//           geocoder.geocode({ address: place }, (results, status) => {\n//             if (status === \"OK\" && results[0]) {\n//               const location = results[0].geometry.location;\n//               resolve({\n//                 name: place,\n//                 lat: location.lat(),\n//                 lng: location.lng(),\n//               });\n//             } else {\n//               console.warn(`Geocode failed for ${place}: ${status}`);\n//               resolve(null);\n//             }\n//           });\n//         });\n//       });\n\n//       Promise.all(placePromises).then((results) => {\n//         const validResults = results.filter((res) => res !== null);\n//         if (validResults.length > 0) {\n//           setPlaceCoordinates(validResults);\n//           setCenter({\n//             lat: validResults[0].lat,\n//             lng: validResults[0].lng,\n//           });\n//         }\n//       });\n//     }\n//   }, [isLoaded, travelData]);\n\n//   if (loadError) return <div className=\"error\">Error loading maps</div>;\n//   if (!isLoaded) return <div className=\"loading\">Loading maps...</div>;\n\n//   return (\n//     <div\n//       className=\"specific-places-container\"\n//       style={{ display: \"flex\", gap: \"2rem\", width: \"100%\" }}\n//     >\n//       {/* LEFT PANEL */}\n\n//       <div style={{ flex: 1, minWidth: \"300px\" }}>\n//         <div className=\"travel-data\">\n//           <h2>Travel Plan Details</h2>\n//           <div className=\"data-item\">\n//             <strong>Current City:</strong> {travelData.currentCity}\n//           </div>\n//           <div className=\"data-item\">\n//             <strong>Destination:</strong> {travelData.destination}\n//           </div>\n//           <div className=\"data-item\">\n//             <strong>Days:</strong> {travelData.days}\n//           </div>\n//           {Array.isArray(travelData.generatedItinerary) && (\n//             <div className=\"data-item\">\n//               <strong>Generated Itinerary:</strong>\n//               <ul>\n//                 {travelData.generatedItinerary.map((item, index) => (\n//                   <li key={index}>{item}</li>\n//                 ))}\n//               </ul>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* <div style={{ marginTop: \"20px\" }}>\n//           <h2>Specific Places</h2>\n//           <ul>\n//             {placeCoordinates.map((place, index) => (\n//               <li key={index}>\n//                 <strong>{place.name}</strong>\n//                 <p>\n//                   Lat: {place.lat.toFixed(4)}, Lng: {place.lng.toFixed(4)}\n//                 </p>\n//               </li>\n//             ))}\n//           </ul>\n//         </div> */}\n//       </div>\n\n//       {/* RIGHT PANEL (MAP) */}\n//       <div style={{ flex: 1, minWidth: \"300px\", height: \"100vh\" }}>\n//         <GoogleMap\n//           mapContainerStyle={{ width: \"100%\", height: \"100%\" }}\n//           zoom={8}\n//           center={center}\n//           onClick={() => setSelectedPlace(null)}\n//         >\n//           {placeCoordinates.map((place, index) => (\n//             <Marker\n//               key={index}\n//               position={{ lat: place.lat, lng: place.lng }}\n//               onClick={() => setSelectedPlace(place)}\n//             />\n//           ))}\n\n//           {selectedPlace && (\n//             <InfoWindow\n//               position={{ lat: selectedPlace.lat, lng: selectedPlace.lng }}\n//               onCloseClick={() => setSelectedPlace(null)}\n//             >\n//               <div>\n//                 <strong>{selectedPlace.name}</strong>\n//               </div>\n//             </InfoWindow>\n//           )}\n//         </GoogleMap>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SpecificPlacesMap;\nvar _c;\n$RefreshReg$(_c, \"SpecificPlacesMap\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","jsxDEV","_jsxDEV","SpecificPlacesMap","travelData","_s","placeCoordinates","setPlaceCoordinates","center","setCenter","lat","lng","selectedPlace","setSelectedPlace","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","libraries","Array","isArray","generatedItinerary","geocoder","window","google","maps","Geocoder","placePromises","map","place","placeName","name","Promise","resolve","geocode","address","results","status","location","geometry","description","console","warn","all","then","validResults","filter","res","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentCity","destination","days","item","index","split","line","i","mapContainerStyle","width","height","zoom","onClick","position","onCloseClick","_c","$RefreshReg$"],"sources":["C:/Users/Deividas/MyProjects/React/LaWander-AI-Frontend/src/components/SpecificPlacesMap.jsx"],"sourcesContent":["// src/components/SpecificPlacesMap.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n} from \"@react-google-maps/api\";\r\nimport \"./SpecificPlaces.css\";\r\n\r\nconst SpecificPlacesMap = ({ travelData }) => {\r\n  const [placeCoordinates, setPlaceCoordinates] = useState([]);\r\n  const [center, setCenter] = useState({ lat: 0, lng: 0 });\r\n  const [selectedPlace, setSelectedPlace] = useState(null);\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries: [\"places\"],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isLoaded && Array.isArray(travelData.generatedItinerary)) {\r\n      const geocoder = new window.google.maps.Geocoder();\r\n      const placePromises = travelData.generatedItinerary.map((place) => {\r\n        const placeName = typeof place === \"string\" ? place : place.name;\r\n        return new Promise((resolve) => {\r\n          geocoder.geocode({ address: placeName }, (results, status) => {\r\n            if (status === \"OK\" && results[0]) {\r\n              const location = results[0].geometry.location;\r\n              resolve({\r\n                name: placeName,\r\n                description: place.description || \"\",\r\n                lat: location.lat(),\r\n                lng: location.lng(),\r\n              });\r\n            } else {\r\n              console.warn(`Geocode failed for ${placeName}: ${status}`);\r\n              resolve(null);\r\n            }\r\n          });\r\n        });\r\n      });\r\n\r\n      Promise.all(placePromises).then((results) => {\r\n        const validResults = results.filter((res) => res !== null);\r\n        if (validResults.length > 0) {\r\n          setPlaceCoordinates(validResults);\r\n          setCenter({\r\n            lat: validResults[0].lat,\r\n            lng: validResults[0].lng,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, [isLoaded, travelData]);\r\n\r\n  if (loadError) return <div className=\"error\">Error loading maps</div>;\r\n  if (!isLoaded) return <div className=\"loading\">Loading maps...</div>;\r\n\r\n  return (\r\n    <div className=\"specific-places-container\">\r\n      {/* LEFT PANEL */}\r\n      <div className=\"left-panel\">\r\n        <div className=\"travel-data\">\r\n          <h2>Travel Plan Details</h2>\r\n          <div className=\"data-item\">\r\n            <strong>Current City:</strong> {travelData.currentCity}\r\n          </div>\r\n          <div className=\"data-item\">\r\n            <strong>Destination:</strong> {travelData.destination}\r\n          </div>\r\n          <div className=\"data-item\">\r\n            <strong>Days:</strong> {travelData.days}\r\n          </div>\r\n          {Array.isArray(travelData.generatedItinerary) && (\r\n            <div className=\"data-item\">\r\n              <strong>Generated Itinerary:</strong>\r\n              <div className=\"itinerary-list\">\r\n                {travelData.generatedItinerary.map((item, index) => {\r\n                  let name, description;\r\n                  if (typeof item === \"string\") {\r\n                    name = item;\r\n                    description = \"\";\r\n                  } else if (typeof item === \"object\") {\r\n                    name = item.name;\r\n                    description = item.description;\r\n                  }\r\n\r\n                  return (\r\n                    <div key={index} className=\"itinerary-item\">\r\n                      <h3>{name}</h3>\r\n                      {description && (\r\n                        <p>\r\n                          {description.split(\"\\n\").map((line, i) => (\r\n                            <span key={i}>\r\n                              {line}\r\n                              <br />\r\n                            </span>\r\n                          ))}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* RIGHT PANEL (MAP) */}\r\n      <div className=\"right-panel\">\r\n        <GoogleMap\r\n          mapContainerStyle={{ width: \"100%\", height: \"100%\" }}\r\n          zoom={8}\r\n          center={center}\r\n          onClick={() => setSelectedPlace(null)}\r\n        >\r\n          {placeCoordinates.map((place, index) => (\r\n            <Marker\r\n              key={index}\r\n              position={{ lat: place.lat, lng: place.lng }}\r\n              onClick={() => setSelectedPlace(place)}\r\n            />\r\n          ))}\r\n\r\n          {selectedPlace && (\r\n            <InfoWindow\r\n              position={{ lat: selectedPlace.lat, lng: selectedPlace.lng }}\r\n              onCloseClick={() => setSelectedPlace(null)}\r\n            >\r\n              <div>\r\n                <strong>{selectedPlace.name}</strong>\r\n              </div>\r\n            </InfoWindow>\r\n          )}\r\n        </GoogleMap>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpecificPlacesMap;\r\n\r\n\r\n// old working version\r\n// // src/components/SpecificPlacesMap.jsx\r\n// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//   GoogleMap,\r\n//   useLoadScript,\r\n//   Marker,\r\n//   InfoWindow,\r\n// } from \"@react-google-maps/api\";\r\n// import \"./SpecificPlaces.css\";\r\n// const SpecificPlacesMap = ({ travelData }) => {\r\n//   const [placeCoordinates, setPlaceCoordinates] = useState([]);\r\n//   const [center, setCenter] = useState({ lat: 0, lng: 0 });\r\n//   const [selectedPlace, setSelectedPlace] = useState(null);\r\n\r\n//   const { isLoaded, loadError } = useLoadScript({\r\n//     googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n//     libraries: [\"places\"],\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     if (isLoaded && Array.isArray(travelData.generatedItinerary)) {\r\n//       const geocoder = new window.google.maps.Geocoder();\r\n//       const placePromises = travelData.generatedItinerary.map((place) => {\r\n//         return new Promise((resolve) => {\r\n//           geocoder.geocode({ address: place }, (results, status) => {\r\n//             if (status === \"OK\" && results[0]) {\r\n//               const location = results[0].geometry.location;\r\n//               resolve({\r\n//                 name: place,\r\n//                 lat: location.lat(),\r\n//                 lng: location.lng(),\r\n//               });\r\n//             } else {\r\n//               console.warn(`Geocode failed for ${place}: ${status}`);\r\n//               resolve(null);\r\n//             }\r\n//           });\r\n//         });\r\n//       });\r\n\r\n//       Promise.all(placePromises).then((results) => {\r\n//         const validResults = results.filter((res) => res !== null);\r\n//         if (validResults.length > 0) {\r\n//           setPlaceCoordinates(validResults);\r\n//           setCenter({\r\n//             lat: validResults[0].lat,\r\n//             lng: validResults[0].lng,\r\n//           });\r\n//         }\r\n//       });\r\n//     }\r\n//   }, [isLoaded, travelData]);\r\n\r\n//   if (loadError) return <div className=\"error\">Error loading maps</div>;\r\n//   if (!isLoaded) return <div className=\"loading\">Loading maps...</div>;\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"specific-places-container\"\r\n//       style={{ display: \"flex\", gap: \"2rem\", width: \"100%\" }}\r\n//     >\r\n//       {/* LEFT PANEL */}\r\n\r\n//       <div style={{ flex: 1, minWidth: \"300px\" }}>\r\n//         <div className=\"travel-data\">\r\n//           <h2>Travel Plan Details</h2>\r\n//           <div className=\"data-item\">\r\n//             <strong>Current City:</strong> {travelData.currentCity}\r\n//           </div>\r\n//           <div className=\"data-item\">\r\n//             <strong>Destination:</strong> {travelData.destination}\r\n//           </div>\r\n//           <div className=\"data-item\">\r\n//             <strong>Days:</strong> {travelData.days}\r\n//           </div>\r\n//           {Array.isArray(travelData.generatedItinerary) && (\r\n//             <div className=\"data-item\">\r\n//               <strong>Generated Itinerary:</strong>\r\n//               <ul>\r\n//                 {travelData.generatedItinerary.map((item, index) => (\r\n//                   <li key={index}>{item}</li>\r\n//                 ))}\r\n//               </ul>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* <div style={{ marginTop: \"20px\" }}>\r\n//           <h2>Specific Places</h2>\r\n//           <ul>\r\n//             {placeCoordinates.map((place, index) => (\r\n//               <li key={index}>\r\n//                 <strong>{place.name}</strong>\r\n//                 <p>\r\n//                   Lat: {place.lat.toFixed(4)}, Lng: {place.lng.toFixed(4)}\r\n//                 </p>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </div> */}\r\n//       </div>\r\n\r\n//       {/* RIGHT PANEL (MAP) */}\r\n//       <div style={{ flex: 1, minWidth: \"300px\", height: \"100vh\" }}>\r\n//         <GoogleMap\r\n//           mapContainerStyle={{ width: \"100%\", height: \"100%\" }}\r\n//           zoom={8}\r\n//           center={center}\r\n//           onClick={() => setSelectedPlace(null)}\r\n//         >\r\n//           {placeCoordinates.map((place, index) => (\r\n//             <Marker\r\n//               key={index}\r\n//               position={{ lat: place.lat, lng: place.lng }}\r\n//               onClick={() => setSelectedPlace(place)}\r\n//             />\r\n//           ))}\r\n\r\n//           {selectedPlace && (\r\n//             <InfoWindow\r\n//               position={{ lat: selectedPlace.lat, lng: selectedPlace.lng }}\r\n//               onCloseClick={() => setSelectedPlace(null)}\r\n//             >\r\n//               <div>\r\n//                 <strong>{selectedPlace.name}</strong>\r\n//               </div>\r\n//             </InfoWindow>\r\n//           )}\r\n//         </GoogleMap>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SpecificPlacesMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}